本書的序點出了作者的目的：不是教讀者怎麼用其他人做的工具，而是直接面對「軟體的本質」：徹底認識資料結構與演算法。不只要會用，更要能分析演算法的時間與空間複雜度，達到知其然更知其所以然的境界。

這件事非常重要，因為很多人都會推薦要讀 The Art of Computer Programming，但一翻開就傻眼了，這些人把本書想成 The C Programming Language 那樣的語言教學，或是像 Effective C++ 那樣的「進階」語言教學。不，這套書比你所能想像的電腦書籍都還要進階，是要徹底認識我們寫的程式，到底是什麼「東西」。

序中最重要的概念我認為就是 people who is more than casually interested in computer，跟 analysis 這個字。我一直到很多年後才意識到，要讀此書你得有些偏執才行，畢竟，大部分程式員沒碰 (或讀不懂) 這套書，也都能安然度過整個職業生涯。所謂偏執，是你就是不安於表相看到的一切，非得找到表相背後的真相才肯罷休，這樣的人才可能讀得下去。

所以我也不會逢人就推薦本書，對程式開發有興趣的人，絕對應該先學好一兩套程式語言 (Python, Golang 都很好)，再讀些基本的資料結構跟演算法的教科書，若你無法滿足於此，那麼也許你可以考慮來讀此書。

Knuth 教授寫本書時做了一個特別的選擇：用組合語言作為開發的程式語言，而且是一個虛構的機器 (MMIX) 的組合語言。這選擇肯定嚇跑不少讀者，但他的理由也很充分，不用組合語言那還有什麼選擇？他剛寫本書的 1960 年代流行的高階語言是 FORTRAN，再來可能是 C，然後是 C++，Java 等等。

程式語言就像流行服飾來來去去，而他的書想呈現的，Knuth 教授自豪地說，是恆久 (timeless) 的觀念。

雖然 MMIX 是虛構的機器，但 Knuth 自己寫了模擬器 (simulator) 跟組譯器 (assembler)，之後更有人幫忙把這些工具移植到各大平台，所以要跑書中的程式並沒有太多障礙，關鍵是讀者自己要學會 MMIX 組合語言。

讀這套書並沒有限定照什麼順序，教授在書中制訂了讀這本書的「演算法」，打開新的章節後，先看看有沒有興趣，若沒有興趣，可以跳下個章節。除了前兩章以外，第一二章學的內容由於要貫穿整套書，因此不能跳。

而這前兩章，就會困住許多的讀者，因為內容多是數學 (主要是離散數學，但也有高等的微積分等內容)，我早期接觸此書時，也是困住了幾年。教授也建議，這邊真的有困難的話，可以先熟悉要用到的數學公式即可，推導過程可先忽略。尤其迫不及待想動手寫程式的人，可以在簡單略讀 1.1, 1.2 後，把重點放在 1.3 也就是 MMIX 機器跟組合語言的學習。

最後提醒一下，教授花了一整個 Notes on the exercises 來強調習題的重要性，還花了心思製作了難度指數，即使只想略讀 1.1, 1.2 的讀者，也應該把難度 20 以下的習題掃過 (這部分對我來說也挺花時間的)，認真嘗試解題後，再翻到後面的習題解答看看，有很多 insight 都藏在習題解答中。

- 宗逸居士
2020-01-25